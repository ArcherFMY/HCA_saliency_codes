clc;
clear;
close all;
% clear all;
addpath(genpath('matlab'));
% addpath('others');
% addpath('SLIC-DBSCAN');
% addpath('mex');
global res;
global net1; 

layer1 = 32;
layer2 = 6;
alpha1 = 5;
alpha2 = 3;
alpha3 = 2;
alpha = [alpha1;alpha2;alpha3];
spnumber = 200;  %the number of superpixels
% compactness=20;
% Single-layer Cellular Automata parameters
theta = 15;  % control the strength of similarity between neighbors
theta2 = 10;
a = 0.6;
b = 0.2;     % a and b control the strength of coherence
%%
disp(['Initialization...']);
tic;
% run vl_compilenn;
run vl_setupnn;
net1 = dagnn.DagNN.loadobj(load('./Data/pascal-fcn32s-dag.mat')) ;
toc;
disp(['Done!']);
%%

imgRoot = 'E:\Database\Datasets\HKU-IS\HKU-IS-Image\';% test image path
saldir1 = ['E:\Database\fcnfeature_HKU-IS\'];


if ~exist(saldir1, 'dir')
    mkdir(saldir1);
end
% if ~exist(saldir2, 'dir')
%     mkdir(saldir2);
% end
imnames = dir([ imgRoot '*' 'png']);
%     load('res32.mat');
padding = [0 100 100 100 100 ... 
            52 52 52 52 52 ... 
            26 26 26 26 26 26 26 ... 
            14 14 14 14 14 14 14 ...
            7 7 7 7 7 7 7 ...
            4];
% layer = 1;
%% 2. Saliency Map Calculation
for ii = 1:length(imnames)
    disp(ii);

   

    imName = [ imgRoot imnames(ii).name ]; 
%     layer = 36;
    [input_im_,input_im,w]=removeframe(imName);% run a pre-processing to remove the image frame
    
    input_imlab = RGB2Lab(input_im);
    [m,n,r]=size(input_im);
    disp(['Run SLIC...']);
    tic;
    [sulabel,impfactor8,pixelList] = SLIC_Split(input_im, spnumber);
    toc;
    disp(['Done!']);
    supNum = max(sulabel(:));
    S_prior=ones(supNum,1)*0.5; 
        bdIds = GetBndPatchIds(sulabel);
        
        impfactor = impfactor8;
        for i=1:length(bdIds)
            for j=i+1:length(bdIds)
            impfactor(bdIds(i),bdIds(j))=1;
            impfactor(bdIds(j),bdIds(i))=1;
            end
        end
        edges=[];
        for i=1:supNum
            indext=[];
            ind=find(impfactor(i,:)==1);
            for j=1:length(ind)
                indj=find(impfactor(ind(j),:)==1);
                indext=[indext,indj];
            end
            indext=[indext,ind];
            indext=indext((indext>i));    
            indext=unique(indext);
            if(~isempty(indext))
                ed=ones(length(indext),2);
                ed(:,2)=i*ed(:,2);
                ed(:,1)=indext;
                edges=[edges;ed];
            end
        end
        disp(['Run SCA']);
         tic;
    %%
    img = single(input_im_); % note: 255 range
    %     img = imResampleMex(img, net.normalization.imageSize(1:2));
    img = imresize(img, [net1.meta.normalization.imageSize(1),net1.meta.normalization.imageSize(2)]);
    %     img = img - net.normalization.averageImage;
    tmp=single(zeros(500,500,3));
    tmp(:,:,1)=net1.meta.normalization.averageImage(:,:,1);
    tmp(:,:,2)=net1.meta.normalization.averageImage(:,:,2);
    tmp(:,:,3)=net1.meta.normalization.averageImage(:,:,3);
    img = img - tmp;
    % img = gpuArray(img);

        % run the CNN
    %     res=vl_simplenn(net,img);
    disp(['Run FCN Feature...']);
    tic;
      net1.eval({'data', img}) ;
    toc;
    disp(['Done!']);
  %%
    layer6 = res{6};
    layer32 = res{32};
    temp = layer32;
    vgg_feat1 = temp(padding(layer1):end-padding(layer1)+1,padding(layer1):end-padding(layer1)+1,:);
    vgg_feat1 = double(imresize(vgg_feat1,[m,n]));
    meanVgg1 = GetMeanColor(vgg_feat1,pixelList,'vgg

    temp = layer6;
    vgg_feat2 = temp(padding(layer2):end-padding(layer2)+1,padding(layer2):end-padding(layer2)+1,:);
    vgg_feat2 = double(imresize(vgg_feat2,[m,n]));
    meanVgg2 = GetMeanColor(vgg_feat2,pixelList,'vgg');
    weights = my_makeweights(edges,meanVgg1,meanVgg2,theta,alpha);
    F = adjacency(edges,weights,supNum);                   

        % calculate a row-normalized impact factor matrix
        D_sam = sum(F,2);
        D = diag(D_sam);
        F_normal = D \ F;   % the row-normalized impact factor matrix

        % compute Coherence Matrix 
        C = a * normalization(1./max(F),0) + b;
        C_normal = diag(C);

        %%-----------------Single-layer Cellular Automata---------------%%
    %%
        %     S_prior=normalization(S_prior,0);
        S_N1=S_prior;
        diff = setdiff(1:supNum, bdIds);
        for lap=1:5
            S_N1(bdIds) = S_N1(bdIds) - 0.6;
            neg_Ind = find(S_N1 < 0);
            if numel(neg_Ind) > 0
               S_N1(neg_Ind) = 0.001; 
            end
            S_N1=C_normal*S_N1+(1-C_normal).*diag(ones(1,supNum))*F_normal*S_N1;
%             S_N1 = F_normal*S_N1;
            S_N1(diff)=normalization(S_N1(diff),0);
%             image_sam_1=zeros(m,n);
%             image_sam_1(:)=S_N1(sulabel(:));
%             image_saliency_1 = zeros(w(1), w(2));
%             image_saliency_1(w(3):w(4), w(5):w(6)) = image_sam_1;
% %             figure;
% %             set (gcf,'Position',[1000,0,n,m]);
%             imshow(image_saliency_1);
        end        
    %     image_sam_1=zeros(m,n);
    %     image_sam_1(:)=S_N1(sulabel(:));
    %     image_saliency_1 = zeros(w(1), w(2));
    %     image_saliency_1(w(3):w(4), w(5):w(6)) = image_sam_1;
    % %     figure;
    % %     set (gcf,'Position',[0,500,n,m]);
    % %     imshow(image_saliency_1);
    %     outname=[saldir1 imnames(ii).name(1:end-4) '.png'];
    %     imwrite(image_saliency_1,outname);
        % step2: control the ratio of foreground larger than a threshold
        for lap = 1:5
            S_N1(bdIds) = S_N1(bdIds) - 0.6;
            neg_Ind = find(S_N1 < 0);
            if numel(neg_Ind) > 0
               S_N1(neg_Ind) = 0.001; 
            end
            most_sal_sup = find(S_N1 >0.93);
            if numel(most_sal_sup) < 0.02*supNum
                sal_diff = setdiff(1:supNum, most_sal_sup);
                S_N1(sal_diff) = normalization(S_N1(sal_diff),0);
            end
            S_N1=C_normal*S_N1+(1-C_normal).*diag(ones(1,supNum))*F_normal*S_N1;

            S_N1(diff)=normalization(S_N1(diff),0);

        end  

        for lap = 1:10
            S_N1 = C_normal*S_N1+(1-C_normal).*diag(ones(1,supNum))*F_normal*S_N1;
            S_N1 = normalization(S_N1, 0);
        end

        image_sam=zeros(m,n);
        image_sam(:)=S_N1(sulabel(:));
        image_saliency = zeros(w(1), w(2));
        image_saliency(w(3):w(4), w(5):w(6)) = image_sam;
end